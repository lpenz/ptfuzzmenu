#!/usr/bin/env python3
"""
Choose a man page to read interactively from a menu with fuzzy search
"""

import argparse
import os
import re
import subprocess

import ptfuzzmenu
from prompt_toolkit import Application
from prompt_toolkit.key_binding import KeyBindings
from prompt_toolkit.key_binding.bindings.focus import focus_next
from prompt_toolkit.key_binding.key_processor import KeyPressEvent
from prompt_toolkit.layout.containers import VSplit
from prompt_toolkit.layout.layout import Layout
from prompt_toolkit.styles import Style
from prompt_toolkit.widgets import Frame, TextArea

E = KeyPressEvent

PATH = "/usr/share/man"


def generator():
    labelre = re.compile(
        re.escape(PATH)
        + r"/(?P<label>man(?P<section>[0-9]+)/(?P<base>.*))\.[0-9]\S*\.gz"
    )
    for root, _, files in os.walk(PATH):
        for filename in files:
            path = os.path.join(root, filename)
            m = labelre.match(path)
            if not m:
                continue
            yield (m.group("label"), (int(m.group("section")), m.group("base")))


def manmenu():
    items = list(generator())
    items.sort()
    contents = TextArea(text="", multiline=True, wrap_lines=True, read_only=True)

    def handle_current(label, item) -> None:
        env = dict(os.environ)
        width = 80
        if contents.window.render_info:
            width = str(contents.window.render_info.window_width - 1)
        env["MANWIDTH"] = str(width)
        manpage = subprocess.check_output(
            ["man", "--encoding=utf-8", str(item[0]), item[1]],
            env=env,
            encoding="utf-8",
            stderr=subprocess.STDOUT,
        )
        contents.text = subprocess.check_output(
            ["col", "-bh"],
            input=manpage,
            encoding="utf-8",
            stderr=subprocess.STDOUT,
        ).replace("\t", "    ")

    menu = ptfuzzmenu.FuzzMenu(items=items, handle_current=handle_current)

    root_container = VSplit(
        [
            Frame(title="Man pages", body=menu),
            Frame(title="Contents", body=contents),
        ]
    )
    layout = Layout(root_container)
    layout.focus(menu)
    # Choose some strong colors just for show:
    style = Style.from_dict(
        {
            "fuzzmenu.focused fuzzmenu.current": "fg:white bg:red",
            "fuzzmenu.unfocused fuzzmenu.current": "fg:darkgreen bg:darkred",
            "fuzzmenu.focused fuzzmenu.item": "fg:white bg:blue",
            "fuzzmenu.unfocused fuzzmenu.item": "fg:gray bg:darkblue",
        }
    )
    kb = KeyBindings()
    app: Application[None] = Application(
        layout=layout,
        key_bindings=kb,
        full_screen=True,
        style=style,
    )

    @kb.add("tab")
    def tab(event: E) -> None:
        focus_next(event)

    @kb.add("c-c")
    @kb.add("c-d")
    @kb.add("escape", "q")
    def close(event: E) -> None:
        app.exit()

    app.run()


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "--version", "-V", action="version", version="%(prog)s " + ptfuzzmenu.version()
    )
    parser.parse_args()
    manmenu()


if __name__ == "__main__":
    main()
